================================================================================
Function declarations
================================================================================

fn foo(count: number): number {
    return count + 1;
}

let a = foo(1);

--------------------------------------------------------------------------------

(source_file
    (function_item
    (identifier)
    (parameters
        (parameter
        (identifier)
        (primitive_type)))
    (primitive_type)
    (block
        (expression_statement
        (return_expression
            (binary_expression
            (identifier)
            (integer_literal))))))
    (let_declaration
    (identifier)
    (call_expression
        (identifier)
        (arguments
        (integer_literal)))))

================================================================================
Struct
================================================================================

struct User {
    name: string = "",
    age: number,
}

let user = User {
    name: "John",
    age: 30,
};

--------------------------------------------------------------------------------

(source_file
    (struct_item
    (type_identifier)
    (field_declaration_list
        (field_declaration
        (field_identifier)
        (primitive_type)
        (string_literal))
        (field_declaration
        (field_identifier)
        (primitive_type))))
    (let_declaration
    (identifier)
    (struct_expression
        (type_identifier)
        (field_initializer_list
        (field_initializer
            (field_identifier)
            (string_literal
            (string_fragment)))
        (field_initializer
            (field_identifier)
            (integer_literal))))))

================================================================================
Param declaration
================================================================================

param {
    value = 10,

    message = "hello",

    @meta(title = "Limit", range = 50..100)
    limit = 50,

    @meta(title = "Render style", choices = ["line" = "线", "bar" = "柱"])
    render_style = "line",
}

--------------------------------------------------------------------------------

    (source_file
      (meta_item
        (field_declaration_list
          (field_declaration
            (field_identifier)
            (integer_literal))
          (field_declaration
            (field_identifier)
            (string_literal
              (string_fragment)))
          (attribute_item
            (identifier)
            (meta_attribute
              (identifier)
              (string_literal
                (string_fragment))
              (identifier)
              (field_expression
                (integer_literal)
                (ERROR)
                (integer_literal))))
          (field_declaration
            (field_identifier)
            (integer_literal))
          (attribute_item
            (identifier)
            (meta_attribute
              (identifier)
              (string_literal
                (string_fragment))
              (identifier)
              (array_expression
                (assignment_expression
                  (string_literal
                    (string_fragment))
                  (string_literal
                    (string_fragment)))
                (assignment_expression
                  (string_literal
                    (string_fragment))
                  (string_literal
                    (string_fragment))))))
          (field_declaration
            (field_identifier)
            (string_literal
              (string_fragment))))))

================================================================================
Meta declaration
================================================================================

meta {
    title = "MACD indicator",
    description = "MACD is a trend-following indicator that consists of three lines, namely the fast line, the slow line and the bar line.",
    author = "Navi Team"
}

--------------------------------------------------------------------------------

    (source_file
      (meta_item
        (field_declaration_list
          (field_declaration
            (field_identifier)
            (string_literal
              (string_fragment)))
          (field_declaration
            (field_identifier)
            (string_literal
              (string_fragment)))
          (field_declaration
            (field_identifier)
            (string_literal
              (string_fragment))))))

================================================================================
I18n declaration
================================================================================

@length {
    "en" = `Length {n}`,
    "zh-CN" = `长度 {n}`
}

--------------------------------------------------------------------------------

    (source_file
      (i18n_item
        (field_declaration_list
          (field_declaration
            (string_literal
              (string_fragment))
            (string_template
              (string_fragment)))
          (field_declaration
            (string_literal
              (string_fragment))
            (string_template
              (string_fragment))))))

================================================================================
Export let
================================================================================

export let a = 1;
export let b = "hello";

--------------------------------------------------------------------------------

    (source_file
      (export_item
        (let_declaration
          (identifier)
          (integer_literal)))
      (export_item
        (let_declaration
          (identifier)
          (string_literal
            (string_fragment)))))
